{"hash":"ab330b454d96b8c67cf70916a615c2cfac25e7c1","data":{"post":{"id":"6cd001447ef82945ccd65398c9000aab","title":"Tools of the trade - Progressive Web App for WikiToLearn","date":"31 May 2017","path":"/posts/2017/05/31/tools-of-the-trade-progressive-web-app-for-wiki-to-learn/","content":"<blockquote>\n<p>This is the second post in my GSoC series. You can read the first one <a href=\"//baldi.me/blog/gsoc-at-kde\">here</a>.</p>\n</blockquote>\n<p>When creating anything from scratch you really have to choose the best resources and tools for the job: if you are baking a cake you want the best ingredients, if you are building a table you want the best wood. The same goes for creating software, one should alwasy aim at using the best technologies availbale.</p>\n<p>Finding the best tools in Web Development is sometimes not an easy task, this field moves so fast that one can't possibly keep up with all the new libraries, frameworks and methodologies (That's why sites like <a href=\"https://dayssincelastjavascriptframework.com/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Days Since Last JavaScript Framework</a> exists).</p>\n<p>The best possible way to find the right combination of tools for a project is by experimenting with as many tools as possible, discarding the one you don't like and keeping the one you like the most (or, sometimes, dislike the less).</p>\n<p>And this is exactly what I started to do in the last months. I got out of my web development comfort zone and gave a try to some new things. Some I didn't like and many others I loved. Yes, sometimes it felt like <a href=\"https://hackernoon.com/how-it-feels-to-learn-javascript-in-2016-d3a717dd577f\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">this article</a> but I am learning tons of new stuff, which is what matters.</p>\n<p>During this Google Summer of Code I will keep experimenting and use many of the concepts I learnt recently: let's wait no more, here is an overview of what I will be using to create <a href=\"//baldi.me/blog/gsoc-at-kde\">WikiToLearn new frontend</a>.</p>\n<h2 id=\"frontend\"><a href=\"#frontend\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Frontend</h2>\n<p>Since we are building a PWA the most (and for many use cases, the only) important thing to consider is the frontend technologies.</p>\n<p>Since we are building something a little bit complex it is definitely worth it to use some kind of frontend framework. There are many out there (React and Angular are probably the most popular) and after trying a few of these I decided to choose <a href=\"https://vuejs.org/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Vue.js</a>.</p>\n<img src=\"https://vuejs.org/images/logo.png\" style=\"max-width: 30%;padding:0.5em;\" alt=\"Vue Logo\">\n<p>Not only it is one of the most lightweight (and fast) framework available, it is  actively developed and has an awesome and welcoming community. It is far from being as popular as React or Angular but in the near future I hope it will reach their popularity, because it deserves it.</p>\n<p>I choose it because it is simple enough for newcomers but powerful for experienced users. Its templating language is also very easy to understand: I never liked React and its JSX.</p>\n<img src=\"https://vuejs.org/images/vue-component.png\" style=\"max-width: 60%;\" alt=\"\">\n<p>Out of the box it only provides the minimal required functionalities: it is more of a micro framework that you can complete with additional (but alwasy optional) libraries. In our case we will use Vuex for state management (think of it as a global variable which does control the state of the application) and vue-router for route managament (it does basically control which parts of the interface to display based on the links you click).</p>\n<h3 id=\"writing-code\"><a href=\"#writing-code\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Writing code</h3>\n<p>For writing HTML code for components and views we decided to use <a href=\"https://github.com/pugjs/pug#syntax\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">pug</a> instead of plain HTML. This is because pug forces you to indent your code properly (in the same way Python does): it may seems like a small reason but this means that one is forced to write clearer code, something <em>very</em> important when working on a open source project.</p>\n<p>For styling the interface we are using <a href=\"http://sass-lang.com/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Sass</a>. We have been using this for some time and it does it job very well. Since we already have some parts of the interface styled in Sass it will be easy to port them.</p>\n<p>For Javascript we will be writing <a href=\"http://es6-features.org\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">ES6 Javascript</a>: this allows us to write cleaner and easier to understanand code, all thanks to the syntatic sugar it provides. Of course many browsers don't understand ES6, that's why we are transpiling it to ES5 Javascript using <a href=\"https://buble.surge.sh/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">buble</a>.</p>\n<h3 id=\"bundling-with-webpack\"><a href=\"#bundling-with-webpack\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Bundling with webpack</h3>\n<p>A few years ago there were Bash scripts, then <a href=\"https://gruntjs.com/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">grunt</a> came, then <a href=\"http://gulpjs.com/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">gulp</a>. Nowadays everyone is moving to <a href=\"https://webpack.js.org/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">webpack</a>. Although all the previous mentioned solutions are still valid (and one may say compltely different from webpack), webpack does allow faster development and better building for production.</p>\n<img src=\"https://cloud.githubusercontent.com/assets/499550/17607895/786a415a-5fee-11e6-9c11-45a2cfdf085c.png\" style=\"max-width: 80%;\" alt=\"Webpack\">\n<p>When executing our build-for-production configuration, webpack takes care of many interesting tasks:</p>\n<ul>\n<li>delete unused code and minify used one</li>\n<li>compile pug to HTML, Sass to CSS, ES6 to ES5</li>\n<li>localize the PWA to different languages</li>\n<li>inline images by converting them to Base64</li>\n<li>build an HTML file with all the scripts and styles already linked</li>\n<li>automatic generation of a service worker for caching</li>\n<li>much more</li>\n</ul>\n<p>Although all of these (actually not all) were probably possible with the existing tools it is definitely worth it to invest time in learning webpack: with webpack you just specify the configuration, without defining the work pipeline (in Gulp you had to control which tasks to execute in which order).</p>\n<h3 id=\"coding-conventions\"><a href=\"#coding-conventions\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Coding Conventions</h3>\n<p>Since it is very important to write consistent code in term of conventions, we will be using <a href=\"https://stackoverflow.com/a/8503586\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">linters</a> all over the codebase. Most importantly we will lint the source Javasript (via EsLint), using <a href=\"https://github.com/google/eslint-config-google\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Google' style guide</a> as a base, but we will apply a few customizations to it. We will also lint our CSS via <a href=\"https://stylelint.io/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">stylelint</a>.</p>\n<p>Linters will be running both when developing and when building for production, forcing the developer to fix the existing code according to the linters: you won't be able to run your code unless it is written correctly.</p>\n<p>And yes, we will be using tabs, not spaces: this is where <a href=\"http://editorconfig.org/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">EditorConfig</a> is very important:</p>\n<blockquote>\n<p>EditorConfig helps developers define and maintain consistent coding styles between different editors and IDEs.</p>\n</blockquote>\n<h2 id=\"backend\"><a href=\"#backend\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Backend</h2>\n<h3 id=\"server-side-rendering\"><a href=\"#server-side-rendering\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Server Side Rendering</h3>\n<p>Since we want to keep basic compatibility for people without Javascript and for slow devices we decided to implement <a href=\"https://ssr.vuejs.org/en/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">server side rendering</a>.</p>\n<p>This means that every request will be pre-rendered server side before reaching the browser; Most of the Web Application out there don't pre-render the code, sending to the browser just an almost empty page, leaving to the browser the work to render the interface: this means that if you don't have JS enabled, you are out of luck, nothing will display.</p>\n<p>With SSR, even if you don't have JS, you will at least be able to use the basic functionalities of the website, such as reading pages.</p>\n<h3 id=\"serving-the-pwa\"><a href=\"#serving-the-pwa\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Serving the PWA</h3>\n<p>For serving the PWA to the public we will use a Node.js server, running <a href=\"https://expressjs.com/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Express</a>. Node.js is absolutely needed because we want server side rendering: without it we could have used just a simple HTTP server such as Apache or nginx.</p>\n<h2 id=\"the-template\"><a href=\"#the-template\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>The template</h2>\n<p>In the past months I have been developing (together with another friend of mine) a Vue-based PWA boilerplate project which serves as a starting point for everyone looking to develop a progressive web app with Vue.</p>\n<p>I was going to develop this template anyway regardless of GSoC, because right now there is not a single example project out there with as many features as this one: as soon as I head I was selected I began finalizing the details especially needed for WikiToLearn.</p>\n<figure>\n    <img alt=\"Template for a PWA\" src=\"{{ site.url }}/img/how-to-pwa/template.png\">\n    <figcaption>The generic template: very simple</figcaption>\n</figure>\n<p>If you are interested on the template it is available <a href=\"https://github.com/crisbal/vue-pwa-ssr-fully-featured\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">on Github</a>. Don't worry, there is plenty of documentation that explains everything.</p>\n<h2 id=\"whats-next\"><a href=\"#whats-next\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>What's next?</h2>\n<p>I will be now forking the template and start using it as a base for the WikiToLearn PWA. I will be publishing the project on KDE's git: <a href=\"https://cgit.kde.org/scratch/cristianbaldi/wikitolearn-frontend.git/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">check it out here</a></p>\n<p>In the next weeks I will be developing the first few features for the web app, focusing on the browsing and reading functionalities.</p>\n<p>Let me know what you think about this post in the comments. Expect another post as soon as I have something good to show you.</p>\n"}},"context":{}}